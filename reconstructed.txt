package main

import (
	"fmt"
	"strings"
	"sync"
)

type KeyValue struct {
	Key   string
	Value int
}

func mapFunc(document string) []KeyValue {
	var results []KeyValue
	words := strings.Fields(document)
	for _, word := range words {
		results = append(results, KeyValue{word, 1})
	}
	return results
}

func reduceFunc(key string, values []int) KeyValue {
	sum := 0
	for _, value := range values {
		sum += value
	}
	return KeyValue{key, sum}
}

func main() {
	documents := []string{
		"MapReduce is a programming model",
		"for processing large data sets with a distributed algorithm",
		"MapReduce is used for distributed computing",
	}

	// Map phase
	var mapResults []KeyValue
	var mu sync.Mutex
	var wg sync.WaitGroup

	for _, document := range documents {
		wg.Add(1)
		go func(doc string) {
			defer wg.Done()
			results := mapFunc(doc)
			mu.Lock()
			mapResults = append(mapResults, results...)
			mu.Unlock()
		}(document)
	}
	wg.Wait()

	// Shuffle phase
	intermediate := make(map[string][]int)
	for _, kv := range mapResults {
		intermediate[kv.Key] = append(intermediate[kv.Key], kv.Value)
	}

	// Reduce phase
	var reduceResults []KeyValue
	for key, values := range intermediate {
		reduceResults = append(reduceResults, reduceFunc(key, values))
	}

	// Output the results
	for _, kv := range reduceResults {
		fmt.Printf("%s: %d\n", kv.Key, kv.Value)
	}
}
